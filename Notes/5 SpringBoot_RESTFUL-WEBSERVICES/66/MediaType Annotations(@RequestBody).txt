				Date : 01/12/2020
				Spring Boot 7AM
				  Mr. RAGHU
				----------------
*) @RequestBody Annotation:-
 This concept is used to send Input to RestController#method() as Method parameter
 like one Model class object.

=> First this annotation read Request Header 'Content-Type'.
   Based on type Body data is considered and read into Object format.

*) For XML Data, Content-Type  : application/xml   
*) For JSON Data, Content-Type : application/json  [Default Supported type in Boot]

=> Syntax:
   @RequestBody  <ClassName>  <objectName>

------code-------------------------------
Name : SpringBoot2RestInputMediaType
Dep  : web, lombok, devtools


*) Model class:
package in.nareshit.raghu.model;

import lombok.Data;

@Data
public class Student {

	private Integer sid;
	private String sname;
	private Double sfee;
	
}

*) RestController:-
package in.nareshit.raghu.rest;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import in.nareshit.raghu.model.Student;

@RestController
public class StudentRestController {
	
	@PostMapping("/data") 
	public String readData(
			@RequestBody Student student) 
	{
		return "DATA IS " + student;
	}
}


-------------------------------------------------------------------------
*) Note:
a) GET Request will not support Body, use POST or PUT type.
b) Header Param in POSTMAN auto updated based on DropDown Type [JSON,XML...]
c) send JSON data using Body Section, even JSON- { } also valid (without any keys)
   that indicates Creating Object using Default values.

d) If we send XML Data, then Boot application throws - 415 UN SUPPORTED MEDIA TYPE
   Error, to avoid that add below dependency:

<dependency>
    <groupId>com.fasterxml.jackson.dataformat</groupId>
    <artifactId>jackson-dataformat-xml</artifactId>
</dependency>

also select XML from DropDown that makes : application/xml as Content-Type.
enter content as:
<Student>
 <sid>100</sid>
 <sname>SAM</sname>
 <sfee>500.0</sfee>
</Student>

*) Sending only : <Student> </Student> is also a valid XML content.

*) If we send invalid data that is not matching to variable data type in model class
  (example : sid-->Integer, but data is "sid": 99.99 or "sid": "ABC")
  then Http Status is : 400 BAD REQUEST (type conversion problem).

400 -- Wrong DataType
406 -- Output is not supported (@ResponseBody)
415 -- Input is not supported (@RequestBody)

------------------------------------------------------------