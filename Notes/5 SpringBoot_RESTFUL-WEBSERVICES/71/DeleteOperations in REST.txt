				Date : 08/12/2020
				Spring Boot 7AM
				  Mr. RAGHU
			------------------------------
  		     Spring Boot REST : delete operation

Data JPA has provided method deleteById(id) that internally calls delete(object).

Here, method delete(object) will try to find given object if exist delete or else
throw a default exception EmptyResultDataAccessException by method: deleteById(id).

But this time we have our customized exception 'ProductNotFoundException'.

---code---
1. Service interface : IProductService.java

  void deleteProduct(Integer id);

2. Service Impl : ProductServiceImpl.java


	public void deleteProduct(Integer id) {
		Product p = getOneProduct(id);
		repo.delete(p);
	}


3. RestController

	@DeleteMapping("/{id}")
	public ResponseEntity<String> deleteProduct(
				@PathVariable Integer id
			)
	{
		service.deleteProduct(id);
		return ResponseEntity.ok("Product deleted");
	}


---POSTMAN SCREEN---------------------------------
DELETE  http://localhost:9898/products/1  SEND
--------------------------------------------------


Aadhar/VoterId/Driving Licence --> Update your name

id/number---> (PK)  ---> exist or not, if exist ---> update
22558800 ---> not exist

PK/ Object

====================code :for update operations=================
1. IProductService.java

	boolean isProductExist(Integer id);
	void updateProduct(Product p);

2. ProductServiceImpl.java
  
	public boolean isProductExist(Integer id) {
		return repo.existsById(id);
	}

	
	public void updateProduct(Product p) {
		var cost = p.getProdCost();

		var gst = cost * 12.0/100;
		var disc = cost * 20.0/100;

		p.setProdGst(gst);
		p.setProdDisc(disc);

		repo.save(p);

	}

3. RestController

	@PutMapping("/{id}")
	public ResponseEntity<String> updateProduct(
			@PathVariable Integer id,
			@RequestBody Product product
			)
	{
		if(service.isProductExist(id)) {
			product.setProdId(id);
			service.updateProduct(product);
			return ResponseEntity.ok("Product Updated!!");
		} else {
			// *** throw back to exception handler
			throw new ProductNotFoundException(
					"Product '"+id+"' Not exist todo Update!!");
		}
		
	}
===============================RESTCONTROLLER CODE======================
package in.nareshit.raghu.rest;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import in.nareshit.raghu.exception.ProductNotFoundException;
import in.nareshit.raghu.model.Product;
import in.nareshit.raghu.service.IProductService;

@RestController
@RequestMapping("/products")
public class ProductRestController {
	
	@Autowired
	private IProductService service;
	
	@PostMapping
	public ResponseEntity<String> saveProduct(
			@RequestBody Product product)
	{
		Integer id =  service.saveProduct(product);
		
		return new ResponseEntity<String>("Product saved "+id,HttpStatus.OK);
	}
	
	@GetMapping
	public ResponseEntity<List<Product>> getAllProducts() {
		
		List<Product> list =  service.getAllProducts();
		
		return new ResponseEntity<List<Product>>(list,HttpStatus.OK);
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<Product> getOneProduct(
			@PathVariable Integer id
			)
	{
		Product p = service.getOneProduct(id);
		return new ResponseEntity<Product>(p,HttpStatus.OK);
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<String> deleteProduct(
				@PathVariable Integer id
			)
	{
		service.deleteProduct(id);
		return ResponseEntity.ok("Product deleted");
	}
	
	@PutMapping("/{id}")
	public ResponseEntity<String> updateProduct(
			@PathVariable Integer id,
			@RequestBody Product product
			)
	{
		if(service.isProductExist(id)) {
			product.setProdId(id);
			service.updateProduct(product);
			return ResponseEntity.ok("Product Updated!!");
		} else {
			// *** throw back to exception handler
			throw new ProductNotFoundException(
					"Product '"+id+"' Not exist todo Update!!");
		}
		
	}
	
	
}


try{


} catch(1) {

} catch(2) {
  
} catch(3) {
  
}

List<T>

using List<?> provide data type or ? symbol.

Creating new class

class MyApp<T> {


}
----------------------------------------------------------------------
** Core Java
** Java Script/ECMA Rules/TypeScript


====================Modified try-catch block code-----------------------
package in.nareshit.raghu.rest;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import in.nareshit.raghu.exception.ProductNotFoundException;
import in.nareshit.raghu.model.Product;
import in.nareshit.raghu.service.IProductService;

@RestController
@RequestMapping("/products")
public class ProductRestController {
	
	@Autowired
	private IProductService service;
	
	@PostMapping
	public ResponseEntity<String> saveProduct(
			@RequestBody Product product)
	{
		
		Integer id =  service.saveProduct(product);
		
		return new ResponseEntity<String>("Product saved "+id,HttpStatus.OK);
	}
	
	@GetMapping
	public ResponseEntity<List<Product>> getAllProducts() {
		
		List<Product> list =  service.getAllProducts();
		
		return new ResponseEntity<List<Product>>(list,HttpStatus.OK);
	}
	
	
	
	
	@GetMapping("/{id}")
	public ResponseEntity<?> getOneProduct(
			@PathVariable Integer id
			)
	{
		ResponseEntity<?> resp = null;  // ? it decides that datatype decided at runtime
		
		try {
			Product p = service.getOneProduct(id);
			resp = new ResponseEntity<Product>(
					p,HttpStatus.OK);
			
		}  catch(ProductNotFoundException pne) {
			//send to Custom Exception Handler
			//throw it to handler
			throw pne;
		} catch (Exception e) {
			resp = new ResponseEntity<String>(
					"Unable to fetch Product",
					HttpStatus.INTERNAL_SERVER_ERROR);
			e.printStackTrace();
		}
		
		return resp;
	}
	
	
	
	
	
	
	@DeleteMapping("/{id}")
	public ResponseEntity<String> deleteProduct(
				@PathVariable Integer id
			)
	{
		ResponseEntity<String> resp = null;
		try {
			service.deleteProduct(id);
			resp =ResponseEntity.ok("Product deleted");
			
		} catch (Exception e) {
			resp = new ResponseEntity<String>(
					"Unable to Delete Product", 
					HttpStatus.INTERNAL_SERVER_ERROR);
			e.printStackTrace();
		}
		return resp;
	}
	
	
	@PutMapping("/{id}")
	public ResponseEntity<String> updateProduct(
			@PathVariable Integer id,
			@RequestBody Product product
			)
	{
		if(service.isProductExist(id)) {
			product.setProdId(id);
			service.updateProduct(product);
			return ResponseEntity.ok("Product Updated!!");
		} else {
			// *** throw back to exception handler
			throw new ProductNotFoundException(
					"Product '"+id+"' Not exist todo Update!!");
		}
		
	}
	
}
=================================================================================
OOPs---> 15 days + 5 days

Annotation ---> Decoration @Component
.java  --> .ts 
method --- function
lambda exp  --- inline function
int -- number
