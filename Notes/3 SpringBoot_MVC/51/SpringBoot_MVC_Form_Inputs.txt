				Date : 11/11/2020
				Spring Boot 7AM
				  Mr. RAGHU
			------------------------------
			  HTML Form -- EXAMPLE#2

*) If we add multiple inputs at FORM then equal no.of variables must be added
   at Model class.

---EmployeeReg.jsp---
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h3>WELCOME TO EMPLOYEE REGISTER PAGE</h3>
<form action="add" method="POST">
<pre>
ID   : <input type="text" name="empId"/>
NAME : <input type="text" name="empName"/>
SAL  : <input type="text" name="empSal"/>

PWD  : <input type="password" name="empPwd"/>
GEN  : 
  <input type="radio" name="empGen" value="Female" /> Female
  <input type="radio" name="empGen" value="Male" /> Male

DEPT : <select name="empDept">
			<option value="">-SELECT-</option>
			<option value="DEV">DEV</option>
			<option value="QA">QA</option>
			<option value="BA">BA</option>
		</select> 

ADDR : <textarea name="empAddr"></textarea>

LANGS: 
	<input type="checkbox" name="empLang" value="ENG" /> ENG
	<input type="checkbox" name="empLang" value="HIN" /> HIN
	<input type="checkbox" name="empLang" value="TEL" /> TEL
	<input type="checkbox" name="empLang" value="TAM" /> TAM
	
PROJ:
	<select name="empProj" multiple>
			<option value="HTC">HTC</option>
			<option value="NIT">NIT</option>
			<option value="XYZ">XYZ</option>
			<option value="ORCL">ORCL</option>
			<option value="SEM">SEM</option>
	</select>				

COLOR: <input type="color" name="empColor"/>
DATE : <input type="date" name="empDte"/>
TIME : <input type="time" name="empTme"/>
FILE : <input type="file" name="empFile"/>


   <input type="submit" value="Create"/>
</pre>
</form>
</body>
</html>
---------------------------------

---Employee(model)----
package in.nareshit.raghu.model;

import java.util.List;

import lombok.Data;

@Data
public class Employee {

	private Integer empId;
	private String empName;
	private Double empSal;
	private String empPwd;
	private String empGen;
	private String empDept;
	private String empAddr;
	
	private List<String> empLang;
	private List<String> empProj;
	
	private String empColor;
	private String empDte;
	private String empTme;
	private String empFile;
	
	
}
---------------------------------
*) Incase of multi-select DropDown (<select name="" multiple>)
   and Checkboxes (<input type="checkbox"...)
   define variable in model class with List type.

=> Supported types Array Type, List Type and Set Type.

   String[]     data;  //can not be stored in DB (using ORM).
   List<String> data;  //duplicates, index based store
   Set<String>  data;  // no-duplicates (non-index)

  =============================================================================
				Bi-Directional Form
  =============================================================================
 Normal HTML Form is uni-directional, that means HTML FORM data can be converted 
 into one object on click submit. But, Object data can not be converted back to
 HTML Form (Like Edit Operation).

 In this case use Spring Form Tag Library. 
 

#1. [TEXT INPUT]
HTML Code: 
  <input type="text" name="empId" id="empId" />

Spring Code:
  <form:input path="empId" />

*** Here, path indicates variable Name and it generates name="" and id="" attributes.

#2. [PASSWORD INPUT]
HTML Code: 
  <input type="password" name="empPwd" id="empPwd" />

Spring Code:
  <form:password path="empPwd" />

#3. [RADIO BUTTON INPUT]
HTML Code: 
  <input type="radio" name="empGen" id="empGen" value="Male" /> Male

Spring Code:
  <form:radiobutton path="empPwd" value="Male" /> Male


#4. [CHECK BOX INPUT]
HTML Code: 
  <input type="checkbox" name="empLang" id="empLang" value="ENG" /> ENG

Spring Code:
  <form:checkbox path="empLang" value="ENG" /> ENG


#5. [TEXT AREA INPUT]
HTML Code: 
  <textarea name="empAddr" id="empAddr"></textarea>

Spring Code:
  <form:textarea path="empAddr" />

#6. [DROP DOWN INPUT]
HTM Code:
  <select name="empPrj" id="empPrj">
      <option value="HTC">HTC</option>
  </select>

Spring Code:
<form:select path="empPrj">
   <form:option value="HTC">HTC</form:option>
</form:select>

#7. [FORM TAG]
HTML Code:
  <form action="add" method="POST">

Spring Code:
  <form:form action="add" method="POST" modelAttribute="objectName">


*)Note:
=> To display Spring FORM (with no values) even we need to pass one object  
   (without values set). Bcoz always Form Connected to Object.

java.lang.IllegalStateException: Neither BindingResult nor plain target object for bean name 'employee' available as request attribute

=> To work with Spring Form Tag library we must add below line at the top of JSP page
<%@taglib prefix="form" uri="http://www.springframework.org/tags/form" %>

==============code=======================================
1. Create Starter Project
 name : SpringBoot2WebMvcFormTagsEx
 dep  : web, lombok, tomcat embedded jasper.

2. Model class
package in.nareshit.raghu.model;

import java.util.List;

import lombok.Data;

@Data
public class Employee {

	private Integer empId;
	private String empName;
	private Double empSal;
	private String empPwd;
	private String empGen;
	private String empDept;
	private String empAddr;
	
	private List<String> empLang;
	private List<String> empProj;
	
}

3. Controller
package in.nareshit.raghu.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

import in.nareshit.raghu.model.Employee;

@Controller
public class EmployeeController {

	@GetMapping("/reg")
	public String showRegForm(Model model) {
		Employee e = new Employee();
		e.setEmpId(889);
		e.setEmpName("ABC");
		e.setEmpGen("Male");
		e.setEmpDept("QA");
		
		model.addAttribute("employee", e);
		return "EmployeeReg";
	}
	
	@PostMapping("/save")
	public String readData(
			@ModelAttribute Employee employee, 
			Model model)
	{
		model.addAttribute("emp",employee);
		return "EmpData";
	}
	
		
}

4. application.properties
server.port=9898
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp


5. UI Pages:
-----EmployeeReg.jsp----------
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
    
<%@taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
    
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h3>WELCOME TO EMPLOYEE REGISTER PAGE</h3>
<form:form action="save" method="POST" modelAttribute="employee">
<pre>
ID   : <form:input path="empId"/>
NAME : <form:input path="empName"/>
SAL  : <form:input path="empSal"/>
PWD  : <form:password path="empPwd"/>
GEN  : 
	<form:radiobutton path="empGen" value="Male"/> Male
	<form:radiobutton path="empGen" value="Female"/> Female

DEPT : <form:select path="empDept">
			<form:option value="">-SELECT-</form:option>
			<form:option value="QA">QA</form:option>
			<form:option value="BA">BA</form:option>
			<form:option value="DEV">DEV</form:option>
		</form:select>
ADDR: <form:textarea path="empAddr"/>

LANGS: 
	<form:checkbox path="empLang" value="ENG"/> ENG
	<form:checkbox path="empLang" value="FRE"/> FRE
	<form:checkbox path="empLang" value="ITA"/> ITA

PROJ : <form:select path="empProj" multiple="multiple">
			<form:option value="HTC">HTC</form:option>
			<form:option value="NIT">NIT</form:option>
			<form:option value="ORCL">ORCL</form:option>
			<form:option value="IBM">IBM</form:option>
		</form:select>
		
		<input type="submit" value="Add Employee"/>		
</pre>
</form:form>

</body>
</html>

------EmpData.jsp------
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h3>WELCOME TO DATA PAGE!!: ${emp}</h3>
</body>
</html>