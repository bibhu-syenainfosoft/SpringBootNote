				Date : 09/11/2020
				Spring Boot 7AM
				  Mr. RAGHU
				----------------
1)Sending Data from Controller to UI
 a) Model (I)
   addAttribute(key,val) [Method]
   UI: EL ${key}

*) We can trasfer Primitive Type, Object Type, Collection Data..etc.

*) Object ob=3; //AutoBox + Upcasting.

 //3 --> int type ---> converted to Integer (AutoBoxing) ---> 
 // converted to Number -> converted to Object(upcasting)

   Object ob=false;
   Object ob='A';
   Object ob=10.3;
   Object ob=new Employee();
   Object ob=new ArrayList<String>();


*) Internally Model memory is shared as a Map between Controller to UI using FC
  it is like sending data from Servlet  --->  to Servlet/JSP 
  Data is transfred using Scopes with attributes.

  Add data:
  req.setAttribute(key,val);

  Trasfer Request  (req.getReqDisp(req,resp))

  Read data:
  val=req.getAttribute(key);

** Model(I) its impl class is : BindingAwareModelMap(C) 


====================================================================
*)Note:
a) We can send Any type of data from controller to UI using Model.
b) Model(I) Impl class is BindingAwareModelMap(C).
c) If we send Object Data or collection data and we are priting using EL
   like ${key} then it internally calls toString() method.
d) All Collections are implemented toString() method
  List/Set Type : [Val, Val, Val, Val]
  Map Type      : {key=val, key=val, key=val}
e) We can read object data using its variables/propreties  
   at UI with syntax: ${key.variableName}
   which calls getVariable() internally from object.
   ex:  ${emp.empId}  [Equal java code is emp.getEmpId()]

f)** In realtime, mostly send data from Controller to UI is List.
  ex: List<String>, List<Employee> , List<Object[]>

====Example#1===============================================================
Name : SpringBoot2MVCDataToUi
Dep  : Spring web, lombok

*) Controller

package in.nareshit.raghu.controller;

import java.util.Arrays;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

import in.nareshit.raghu.model.Employee;

//ctrl+shift+O

@Controller
public class EmployeeController {

	@GetMapping("/show")
	public String showData(Model model) {
		System.out.println(model.getClass().getName());
		
		//key(String),value(Object)
		
		//---Primitive Data--------
		model.addAttribute("code", "NIT");
		model.addAttribute("version", 3.3);
		
		//--------Object Data-----------
		Employee employee =  new Employee();
		employee.setEmpId(500);
		employee.setEmpName("SAMPLE");
		employee.setEmpSal(3500.50);
		
		model.addAttribute("emp", employee);
		
		//----------List Data--------------
		//JDK 1.9 : ImmutableCollections
		List<String> list = List.of("A","B","C","D");
		
		model.addAttribute("list", list);	
		
		List<Employee> emps = Arrays.asList(
					new Employee(10, "A", 3.3),
					new Employee(11, "B", 4.3),
					new Employee(12, "C", 5.5),
					new Employee(13, "D", 6.8)
				);
		
		model.addAttribute("emps", emps);	
		
		return "EmpData"; 
	}
}

*) UI : EmpData.jsp
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h3>WELCOME TO EMPLOYEE DATA PAGE</h3>

${emps}

<hr/>
${code}, ${version} //getCode()
<hr/>
${emp} //toString method <br/>

ID : ${emp.empId}, Name : ${emp.empName}, SAL: ${emp.empSal} //calls get method: emp.getEmpSal()
<hr/>
List : ${list} , ${list[0]}

</body>
</html>

*) application.properties
#server.port=9090
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

*) Model class
package in.nareshit.raghu.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
//@Setter @Getter @ToString
@NoArgsConstructor
@AllArgsConstructor
public class Employee {

	private Integer empId;
	private String empName;
	private Double empSal; 
}

*) pom.xml
	<dependency>
		<groupId>org.apache.tomcat.embed</groupId>
		<artifactId>tomcat-embed-jasper</artifactId>
	</dependency>

======================Example#2============================================
JSTL - JSP Standard Tag Library
*)TAG LIBs: Writing Java code at UI using tags Format

Core java:
for(DataType localVar:keyName) {  .. } 

UI: forEach tag
<c:forEach items="${keyName}" var="localVar">
  ...
</c:forEach>


#1) Create Spring Starter Project
Name : SpringBoot2WebMvcDataToUiHtmlTable
Dep  : Spring web, lombok

pom.xml
<dependency>
    <groupId>org.apache.tomcat.embed</groupId>
    <artifactId>tomcat-embed-jasper</artifactId>
</dependency>

<dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>jstl</artifactId>
</dependency>

#2) Model class
package in.nareshit.raghu.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Product {

	private Integer prodId;
	private String prodCode;
	private Double prodCost;
	private String prodVendor;
}

#3) Controller
package in.nareshit.raghu.controller;

import java.util.Arrays;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import in.nareshit.raghu.model.Product;

@Controller
@RequestMapping("/products")
public class ProductController {

	@GetMapping("/all")
	public String showProds(Model model) {
		List<Product> list = Arrays.asList(
					new Product(1100, "PEN", 100.0, "ABC"),
					new Product(1101, "TAB", 120.0, "XYZ"),
					new Product(1102, "MBL", 180.0, "ABC"),
					new Product(1103, "BOX", 150.0, "MNO")
				);
		//send data t UI Page
		model.addAttribute("products", list);
		
		return "ProductViewNew";
	}
}

#4) UI: ProductView.jsp
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
    
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>    
    
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h3>WELCOME TO PRODUCT DATA PAGE!!</h3>
<table border="1">
	<tr>
		<th>ID</th>
		<th>CODE</th>
		<th>COST</th>
		<th>VENDOR</th>
	</tr>
	<c:forEach items="${products}" var="ob">
		<tr>
			<td>${ob.prodId}</td>
			<td>${ob.prodCode}</td>
			<td>${ob.prodCost}</td>
			<td>${ob.prodVendor}</td>
		</tr>
	</c:forEach>
	
</table>
</body>
</html>

---ProductViewNew.jsp (with UI Design)--
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
    
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>    
    
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" >
</head>
<body>
<h3>WELCOME TO PRODUCT DATA PAGE!!</h3>
<table class="table table-hover">
	<tr class="bg-primary text-white">
		<th>ID</th>
		<th>CODE</th>
		<th>COST</th>
		<th>VENDOR</th>
	</tr>
	<c:forEach items="${products}" var="ob">
		<tr>
			<td>${ob.prodId}</td>
			<td>${ob.prodCode}</td>
			<td>${ob.prodCost}</td>
			<td>${ob.prodVendor}</td>
		</tr>
	</c:forEach>
	
</table>
</body>
</html>
--------------------------------------------------------
--application.properties--
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

*) URL: http://localhost:8080/products/all

TASK: Implement HTML table for Student(sid,sname,sfee,course,dob,email).