				Date : 21/11/2020
				Spring Boot 7AM
				   Mr. RAGHU
				-----------------
				 Thymeleaf UI

*) JSP - Java Server Page, to implement Dynamic UI in easy way compared to servlets.
*) Every JSP file internally converted into one Servlet.
*) JSP static and dynamic content both are converted into Servlet code.
Ex:
  <p>Hello Welcome</p>  => out.println("<p>Hello Welcome</p>");

  <%
     Date d = new Date(); => Date d = new Date();
  %>

  <c:forEach>    ..       => for(Type local:data) ...

*) Sometimes in UI design static content will be more and dynamic content will be less.

*) Every controller is not a servlet. Only Frontcontroller is a servlet.
=====================================================================================
Thymeleaf UI is also called as light weight(Less Memory) and faster execution 
UI technology compared to JSP in Java.

=> Thymeleaf file converts only dynamic content into Java code and after execution
   add result back to same Page. Static content remains same in current page.

=> Thymeleaf file is saved with extension .html , but it can have tags related to
   static and dynamic.

=> Dynamic tags specific to thymeleaf start with one common prefix 'th'.
=> All Thymeleaf tags are defined and stored in a server (namespace)
   https://www.thymeleaf.org/

***namespace is location where tags are defined/placed.

=> We should provide thymeleaf namespace at <html> tag level.
  <html xmlns:th="https://www.thymeleaf.org/">
  <html>

=> Spring boot thymeleaf starter provides THYMELEAF-ENGINE that will read only
   thymeleaf tags, those are converted and processed, finally result added to
   Thymeleaf File.

pom.xml
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>

=> By Default thymeleaf starter provides prefix and suffix with default values.
  spring.thymeleaf.prefix=classpath:/templates/
  spring.thymeleaf.suffix=.html

** We can change only prefix, not suffix.

----------Thymeleaf Tags and Symbols------------------------------------------------------
${key}   -- Read data from Model/Container

@{/path}  -- Form Action/URL/HyperLinks (must provide full path=Controller path+method Path)

*{variable} -  only used for FORM <input/>s for two way binding. (BiDirectional).

<div th:text=""></div> : Print data at UI (like out.println)

<div th:each="tempVar:${collectionObject}">  : For Each-loop

</div>

Add External Script file to Thymeleaf:
   <script type="text/javascript" th:src="@{/path}"></script>

Link External CSS file
  <link rel="stylesheet" th:href="@{/path}"/>

HyperLink:
  <a th:href="@{/path}">DELETE</a>

Form tag :
  <form th:action="@{/path}" method="POST" th:object="${modelClsObj}">
  </form>

===========Example#1==============================================
1. Create Starter Project
Name : SpringBoot2ThymeleafUiExOne
Dep  : Spring web, thymeleaf

2. Controller class
package in.nareshit.raghu.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/prod")
public class ProductController {
	
	@GetMapping("/info")
	public String showInfo() {
		return "ProdInfo";
	}

	@GetMapping("/show")
	public String showData(Model model) {
		model.addAttribute("eid", 10);
		model.addAttribute("ename", "ABC");
		model.addAttribute("esal", 300.0);
		
		return "ProductHome";
	}
}


3. UI files: (create under templates folder)
--ProductHome.html---
<!DOCTYPE html>
<html xmlns:th="https://www.thymeleaf.org/">
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
<link rel="stylesheet" th:href="@{/css/myui.css}">
<script type="text/javascript" th:src="@{/js/mydata.js}"></script>

</head>
<body>
<h3>WELCOME TO THYMELEAF UI</h3>
<span th:text="${eid}"></span>,
<span th:text="${ename}"></span>,
<span th:text="${esal}"></span>

<hr/>
<a th:href="@{/prod/info}">Goto..</a>

</body>
</html>

--ProdInfo.html------------
<!DOCTYPE html>
<html xmlns:th="https://www.thymeleaf.org/">
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h3>WELCOME TO PRODUCT INFO</h3>
</body>
</html>
-------------------------

*) myui.css
h3 {
	color: red;
	text-decoration: underline;
}

*) mydata.js
alert("WELCOME TO AP!!");

--Folder System-------
--src/main/resources
   |--static
       |--css 
       |   |--myui.css
       |--js
           |--mydata.js
   |--templates
        |-- ProdInfo.html
	|-- ProductHome.html
      

===============Spring Boot Thymeleaf FORM =================
1. Create Starter Project
Name : SpringBoot2ThymeleafUiFormTwo
Dep  : Spring web, thymeleaf

2. Model class
package in.nareshit.raghu.model;

import lombok.Data;

@Data
public class Student {

	private Integer stdId;
	private String stdName;
	private Double stdFee;
}


3. Controller class
package in.nareshit.raghu.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import in.nareshit.raghu.model.Student;

@Controller
@RequestMapping("/std")
public class StudentController {

	@GetMapping("/data")
	public String showFormWithData(Model model) {
		Student s = new Student();
		s.setStdId(200);
		s.setStdName("ABC");
		s.setStdFee(650.25);
		//FORM BACKING OBJECT
		model.addAttribute("student", s);
		
		return "StudentReg";
	}
	
	
	@PostMapping("/save")
	public String readFormData(
			@ModelAttribute Student student,
			Model model)
	{
		System.out.println(student);
		model.addAttribute("sob", student);
		
		return "StudentData";
	}
	
	
}

4. StudentReg.html
<!DOCTYPE html>
<html xmlns:th="https://www.thymeleaf.org/">
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h3>WELCOME TO REG/EDIT PAGE</h3>
<form th:action="@{/std/save}" method="post" th:object="${student}">
<pre>
ID   : <input type="text" th:field="*{stdId}"/>

NAME : <input type="text" th:field="*{stdName}"/>

FEE  : <input type="text" th:field="*{stdFee}"/>

	<input type="submit" value="Read Data"/>
</pre>
</form>
</body>
</html>

5. StudentData.html
<!DOCTYPE html>
<html xmlns:th="https://www.thymeleaf.org/">
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h3>FORM DATA IS :</h3>
<span th:text="${sob}"></span>
</body>
</html>
