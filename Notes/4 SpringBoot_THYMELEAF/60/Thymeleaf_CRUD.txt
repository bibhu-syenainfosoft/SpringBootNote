				Date : 23/11/2020
				Spring Boot 7AM
				  Mr. RAGHU
				-----------------
Code:
http://www.mediafire.com/file/1sbp4orbbpwipdw/SpringBoot2MvcThymeleafMySQL23112020.zip/file

			Spring Boot : WEB MVC + Thymeleaf + MySQL

#1. Create one starter project
Name : SpringBoot2MvcThymeleafMySQL
Dep  : Spring web, Lombok, MySQL, Data Jpa, Thymeleaf, DevTools.

*) application.properties
#Database connection
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/boot7am
spring.datasource.username=root
spring.datasource.password=root

# JPA Props
spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

#2. Model class
package in.nareshit.raghu.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Data;

@Data
@Entity
@Table(name="emptab")
public class Employee {
	@Id
	@GeneratedValue
	private Integer eid;
	
	private String ename;
	private String email;
	
	private Double esal;
	private String dept;
	
	private Double hra;
	private Double da;
	
}



#3. Repository Interface
package in.nareshit.raghu.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import in.nareshit.raghu.model.Employee;

public interface EmployeeRepository 
	extends JpaRepository<Employee, Integer> {

}



#4. Service Interface

package in.nareshit.raghu.service;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import in.nareshit.raghu.model.Employee;

public interface IEmployeeService {

	Integer saveEmployee(Employee e);
	List<Employee> getAllEmployees();
	void deleteEmployee(Integer id);
	
	Employee getOneEmployee(Integer id);
	void updateEmployee(Employee e);
	
	Page<Employee> getAllEmployees(Pageable pageable);
	
}


***Custom Exception 
package in.nareshit.raghu.exception;

public class EmployeeNotFoundException extends RuntimeException {

	private static final long serialVersionUID = 1L;

	public EmployeeNotFoundException() {
		super();
	}
	
	public EmployeeNotFoundException(String messsage) {
		super(messsage);
	}
	
}


#5. Service Impl

package in.nareshit.raghu.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import in.nareshit.raghu.exception.EmployeeNotFoundException;
import in.nareshit.raghu.model.Employee;
import in.nareshit.raghu.repo.EmployeeRepository;
import in.nareshit.raghu.service.IEmployeeService;

@Service    //calculations,logics, TxManagement
public class EmployeeServiceImpl implements IEmployeeService {

	@Autowired
	private EmployeeRepository repo; //HAS-A

	@Override
	public Integer saveEmployee(Employee e) {
		//calculations
		double esal = e.getEsal();
		double hra = esal * 20/100.0;
		double da = esal * 10/100.0;
		e.setHra(hra);
		e.setDa(da);
		//save employee
		e = repo.save(e);
		return e.getEid();
	}

	@Override
	public List<Employee> getAllEmployees() {
		return repo.findAll();
	}

	@Override
	public void deleteEmployee(Integer id) {
		Employee e = getOneEmployee(id);
		repo.delete(e);
		/*
		if(repo.existsById(id)) {
			repo.deleteById(id);
		} else {
			throw new EmployeeNotFoundException("Employee '"+id+"' Not Exist");
		}*/
	}

	@Override
	public Employee getOneEmployee(Integer id) {
		Employee e = repo.findById(id)
				.orElseThrow(
						()-> new EmployeeNotFoundException("Employee '"+id+"' Not Exist")
						);
		return e;
		/*
		Optional<Employee> opt = repo.findById(id);
		if(opt.isPresent()) {
			Employee e = opt.get();
			return e;
		}else {
			throw new EmployeeNotFoundException("Employee '"+id+"' Not Exist");
		}*/
	}

	@Override
	public void updateEmployee(Employee e) {
		if(repo.existsById(e.getEid())) {
			//calculations
			double esal = e.getEsal();
			double hra = esal * 20/100.0;
			double da = esal * 10/100.0;
			e.setHra(hra);
			e.setDa(da);
			repo.save(e);
		} else {
			//throw EmployeeNotFoundException
			throw new EmployeeNotFoundException("Employee '"+e.getEid()+"' not exist");
		}
	}

	@Override
	public Page<Employee> getAllEmployees(Pageable pageable) {
		Page<Employee>  page = repo.findAll(pageable);
		return page;
	}
	

}

-------------------------------------------------------------------------------------
#6. Controller

package in.nareshit.raghu.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import in.nareshit.raghu.model.Employee;
import in.nareshit.raghu.service.IEmployeeService;

@Controller
@RequestMapping("/employee")
public class EmployeeController {

	@Autowired
	private IEmployeeService service;

	@GetMapping("/register")
	public String showReg(Model model) {
		//Form Backing object
		model.addAttribute("employee", new Employee());
		return "EmployeeReg";
	}

	@PostMapping("/save")
	public String saveEmp(
			@ModelAttribute Employee employee,
			Model model) 
	{
		Integer id  = service.saveEmployee(employee);
		model.addAttribute("message", "Employee '"+id+"' saved");
		
		//Form Backing object
		model.addAttribute("employee", new Employee());
		return "EmployeeReg";
	}
	
	@GetMapping("/all")
	public String getAllEmps(Model model) {
		List<Employee> list =  service.getAllEmployees();
		model.addAttribute("list", list);
		return "EmployeeData";
	}

	@GetMapping("/delete")
	public String removeEmp(@RequestParam Integer eid) {
		service.deleteEmployee(eid);
		return "redirect:all";
	}
	
	@GetMapping("/edit")
	public String showEdit(@RequestParam Integer eid, Model model) {
		Employee emp = service.getOneEmployee(eid);
		model.addAttribute("employee",emp);
		return "EmployeeEdit";
	}
	
	@PostMapping("/update")
	public String updateEmployee(@ModelAttribute Employee employee) {
		service.updateEmployee(employee);
		return "redirect:all";
	}
	
	
}

#7. UI Files
--Register.html---
<!DOCTYPE html>
<html xmlns:th="https://www.thymeleaf.org/">
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h3>EMPLOYEE REGISTER FORM</h3>
<form th:action="@{/employee/save}" method="POST" th:object="${employee}">
<pre>
NAME  : <input type="text" th:field="*{ename}" />
EMAIL : <input type="text" th:field="*{email}" />
SAL   : <input type="text" th:field="*{esal}" />
DEP   : <select th:field="*{dept}">
			<option value="">--SELECT-</option>
			<option value="DEV">DEV</option>
			<option value="BA">BA</option>
			<option value="QA">QA</option>
		</select>
		<input type="submit" value="Add Employee"/>
</pre>
</form>
</body>
</html>

---------- Data.html -------------
<!DOCTYPE html>
<html xmlns:th="https://www.thymeleaf.org/">
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h3>EMPLOYEE DATA PAGE</h3>
<table border="1">
	<tr>
		<th>ID</th>
		<th>NAME</th>
		<th>EMAIL</th>
		<th>SALARY</th>
		<th>DEPT</th>
		<th>HRA</th>
		<th>DA</th>
		<th>OPERATIONS</th>
	</tr>
	<tr th:each="ob:${list}">
		<td th:text="${ob.eid}"></td>
		<td th:text="${ob.ename}"></td>
		<td th:text="${ob.email}"></td>
		<td th:text="${ob.esal}"></td>
		<td th:text="${ob.dept}"></td>
		<td th:text="${ob.hra}"></td>
		<td th:text="${ob.da}"></td>
		<td> 
			<a th:href="@{/employee/delete(eid=${ob.eid})}">DELETE</a> | 
			<a th:href="@{/employee/edit(eid=${ob.eid})}">EDIT</a> 
		</td>
	</tr>
	
</table>
</body>
</html>


---------- Edit.html -------------

<!DOCTYPE html>
<html xmlns:th="https://www.thymeleaf.org/">
<head>
<title>Insert title here</title>
</head>
<body>
<h3>EMPLOYEE EDIT FORM</h3>
<form th:action="@{/employee/update}" method="POST" th:object="${employee}">
<pre>
ID    : <input type="text" th:field="*{eid}" readonly/>
NAME  : <input type="text" th:field="*{ename}" />
EMAIL : <input type="text" th:field="*{email}" readonly/>
SAL   : <input type="text" th:field="*{esal}" />
DEP   : <select th:field="*{dept}">
			<option value="">--SELECT--</option>
			<option value="DEV">DEV</option>
			<option value="BA">BA</option>
			<option value="QA">QA</option>
		</select>
		<input type="submit" value="Modify Employee"/>
</pre>
</form>
</body>
</html>

================================================================================

URL Rewriting in Thymeleaf:
Syntax:
th:href="@{ /path (key=val,key=val,key=val) }"   

--> Rquest URL looks like: /path?key=val

Example:-
  th:href="@{   /employee/delete  ( eid=${ob.eid} )  }"

-------------------------------------------------------------------------------
HTML
CSS
Bootstrap
JS
EcmaScript
TypeScript
JQuery
AJAX
Angular/React
--------------------------Pagination code in Thymeleaf-------------------------
<span th:if="${!page.isFirst()}">
	<a th:href="@{/employee/all(page=0)}">First</a>
</span>

<span th:if="${page.hasPrevious()}">
	<a th:href="@{/employee/all(page=${page.number-1})}">Previous</a>
</span>

<th:block th:each="i:${#numbers.sequence(0,page.totalPages-1)}">
  <a th:href="@{/employee/all(page=${i})}">[[${i}+1]]</a>
</th:block>

<span th:if="${page.hasNext()}">
	<a th:href="@{/employee/all(page=${page.number+1})}">Next</a>
</span>

<span th:if="${!page.isLast()}">
	<a th:href="@{/employee/all(page=${page.totalPages-1})}">Last</a>
</span>

Q) What is the difference between Synchronous and Asynchronous communications in web application?
The differences between asynchronous and synchronous include: Async is multi-thread, which means operations or programs can run in parallel. Sync is a single-thread, so only one operation or program will run at a time. Async is non-blocking, which means it will send multiple requests to a server.
