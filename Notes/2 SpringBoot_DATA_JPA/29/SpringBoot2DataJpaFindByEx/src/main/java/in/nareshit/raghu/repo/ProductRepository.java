package in.nareshit.raghu.repo;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import in.nareshit.raghu.model.Product;

public interface ProductRepository 
extends JpaRepository<Product, Integer> {
	
	//define variables which you want to display using SELECT clause
	interface MyView {
		//DataType get<Variable>();
		String getProdName();
		Double getProdCost();
	}
	
	// SQL: select prodName,prodCost from product where prodGrade=?
	List<MyView> findByProdGrade(String prodGrade);
	
	
	// findBy<VariablesWithConditions>OrderBy<VariableName>Asc/Desc
	//SQL:  SELECT * FROM PRODUCT WHERE prod_cost=? order by prod_vendor ASC
	List<Product> findByProdCostOrderByProdVendor(Double prodCost);
	List<Product> findByProdCostOrderByProdVendorDesc(Double prodCost);
	
	//--------------3. AND/OR ----------------------
	// findBy<VariableWithConditions>And<VariableWithConditions>(<Params>);
	// SQL: SELECT * FROM PRODUCT WHERE prod_name like ? and prod_cost>=?
	List<Product> findByProdNameLikeAndProdCostGreaterThanEqual(String prodName,Double prodCost);
	
	// SQL: SELECT * FROM PRODUCT WHERE prod_name like ? or prod_cost>=?
	List<Product> findByProdNameLikeOrProdCostGreaterThanEqual(String prodName,Double prodCost);
	

	//------------2 like operator-----------------------------
	// SQL: SELECT * FROM PRODUCT  WHERE prod_name like '?' (any expression)
	List<Product> findByProdNameLike(String prodNameExpression);

	// SQL: SELECT * FROM PRODUCT  WHERE prod_name not like '?' (any expression)
	List<Product> findByProdNameNotLike(String prodNameExpression);

	//---StartingWith with is equals to <input>% [Generated by Data JPA] 
	List<Product> findByProdNameStartingWith(String prodName);

	//---EndingWith with is equals to %<input> [Generated by Data JPA] 
	List<Product> findByProdNameEndingWith(String prodName);

	//---Containing with is equals to %<input>% [Generated by Data JPA] 
	List<Product> findByProdNameContaining(String prodName);

	//--------------------------1 basics-----------------------------

	//RT  findBy<VariableName>(<DataType> <paramName>);
	//SQL: SELECT * FROM PRODUCT WHERE PROD_VENDOR=? 
	List<Product> findByProdVendor(String prodVendor);

	//SQL: SELECT * FROM PRODUCT WHERE PROD_GRADE=?
	//List<Product> findByProdGrade(String prodGrade);

	//SQL: SELECT * FROM PRODUCT WHERE PROD_COST>=?
	//RT  findBy<VariableName><OperatorType>(<DataType> <paramName>);
	List<Product> findByProdCostGreaterThanEqual(Double prodCost);

	//SQL: SELECT * FROM PRODUCT WHERE PROD_COST<?
	List<Product> findByProdCostLessThan(Double prodCost);

	//SQL: SELECT * FROM PRODUCT WHERE PROD_GRADE IS NULL
	List<Product> findByProdGradeIsNull();
	//SQL: SELECT * FROM PRODUCT WHERE PROD_GRADE IS NOT NULL
	List<Product> findByProdGradeNotNull(); //word Is is optional
	//List<Product> findByProdGradeIsNotNull();


}
